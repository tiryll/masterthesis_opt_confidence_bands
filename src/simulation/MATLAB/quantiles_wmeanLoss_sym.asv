
function xmin = quantiles_wmeanLoss_sym(Theta_Cov,weights,nsims,cred,lB)
    
    options = optimoptions('Display','notify', 'Algorithm', 'interior-point', 'MaxFunEvals', 50000, 'MaxIter', 30000, 'Display', 'iter','GradConstr','on','GradObj', 'on' );
    
    nzero_entries = diag(Theta_Cov)>0;
    K=sum(nzero_entries);
    
    Theta_Cov_nzero=Theta_Cov(nzero_entries,nzero_entries);

    [Theta_Cov_V,Theta_Cov_D] = eig(Theta_Cov_nzero);
    Theta_Cov_sqrt = sqrt(Theta_Cov_D)*Theta_Cov_V';

    hn = nsims^(-1/2);
    
    Zs = randn(nsims,K)*Theta_Cov_sqrt;

    xmin = fmincon(@(param)obj1(param,K,weights), lB, [], [], [], [], [], [], @(param)constr1(param, Zs,K,cred,hn,nsims), options);

end

function f = kernf(u)

f = ((3/4)*( (u+1) - (1/3)*(u.^3+1) )).*(u>=-1).*(u<=1) + (u>1);

end


function f = dkernf(u)

f = ((3/4)*( 1 - u.^2 )).*(u>=-1).*(u<=1);

end

function [f,df] = obj1(param,sx,oweights)

    lB = param(1:sx,1);
    uB = -lB;


    f = mean( (uB - lB).*oweights);

    df =  -2.*oweights/sx;
end

function [c, ceq, dc, dceq] = constr1(param, Zs, sx,cr,hn, ndraws)

    lB = param(1:sx,1);
    uB = -lB;
   
    arg1 = Zs-ones(ndraws,1)*(lB');
    arg2 = ones(ndraws,1)*(uB')- Zs;
    
    cmat = [kernf(arg1/hn) kernf(arg2/hn)];
    
    dcmat = [-dkernf(arg1/hn)/hn -dkernf(arg2/hn)/hn];
     
    indall = (1:2*sx)'; 
    
    dc1 = zeros(sx,1);
    for j = 1:sx
        
    temp1 = (indall~=j);
    temp2 = (indall~=(j+sx));
    
    dc1(j,1) = -( mean(prod(cmat(:,indall(temp1)),2).*dcmat(:,j) + prod(cmat(:,indall(temp2)),2).*dcmat(:,j+sx)));
    
    end
    
    c1 = cr - mean((prod(kernf(arg1/hn),2).*prod(kernf(arg2/hn),2)));
       
    c2 = 0.1 - (uB - lB);
    dc2 = 2*eye(sx);

	c = [c1;c2];
    dc = [dc1 dc2];
    
    ceq = [];
    dceq = [];
end